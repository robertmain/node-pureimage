[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Line.js",
    "content": "const Point = require('./Point');\n\n/**\n * Create a line object represnting a set of two points in 2D space.\n *\n * Line objects can be constructed by passing in either 4 numbers (startX, startY, endX, endY) - or\n * two {@link Point} objects representing `start` and `end` respectively\n *\n * @class Line\n */\nclass Line {\n    /**\n     * Construct a Line using two {@link Point} objects\n     * .\n     * @param {Point} start An instance of {@link Point} containing X and Y co-ordinates\n     * @param {Point} end   An instance of {@link Point} containing X and Y co-ordinates\n     * @memberof Line\n     */\n    /**\n     * Construct a Line using 4 {@link number}s\n     *\n     * @param {number} startX Starting position on the X axis\n     * @param {number} startY Starting position on the Y axis\n     * @param {number} endX   Ending position on the X axis\n     * @param {number} endY   Ending position on the Y acis\n     * @memberof Line\n     */\n    constructor (){\n        if (arguments.length === 4) {\n            /**\n             * @type {object}\n            */\n            this.start = {};\n            /**\n             * @type {object}\n            */\n            this.end   = {};\n            [this.start.x, this.start.y, this.end.x, this.end.y] = arguments;\n        } else if(arguments.length === 2) {\n            [this.start, this.end] = arguments;\n        } else {\n            throw Error('Please pass either two Point objects, or 4 integers to the constructor');\n        }\n    }\n\n    /**\n     * Get the line length\n     *\n     * @returns {number}\n     *\n     * @memberof Line\n     */\n    getLength() {\n        return Math.sqrt(\n            Math.pow(this.start.x - this.end.x, 2) + Math.pow(this.start.y - this.end.y, 2)\n        );\n    }\n}\n\n/** @ignore */\nmodule.exports = Line;",
    "static": true,
    "longname": "/home/travis/build/robertmain/node-pureimage/src/Line.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Point",
    "memberof": "src/Line.js",
    "static": true,
    "longname": "src/Line.js~Point",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/Line.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Line",
    "memberof": "src/Line.js",
    "static": true,
    "longname": "src/Line.js~Line",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/Line.js",
    "importStyle": "Line",
    "description": "Create a line object represnting a set of two points in 2D space.\n\nLine objects can be constructed by passing in either 4 numbers (startX, startY, endX, endY) - or\ntwo {@link Point} objects representing `start` and `end` respectively",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Line"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Line.js~Line",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Line.js~Line#constructor",
    "access": "public",
    "description": "Construct a Line using 4 {@link number}s",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "startX",
        "description": "Starting position on the X axis"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "startY",
        "description": "Starting position on the Y axis"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "endX",
        "description": "Ending position on the X axis"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "endY",
        "description": "Ending position on the Y acis"
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "start",
    "memberof": "src/Line.js~Line",
    "static": false,
    "longname": "src/Line.js~Line#start",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "end",
    "memberof": "src/Line.js~Line",
    "static": false,
    "longname": "src/Line.js~Line#end",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "getLength",
    "memberof": "src/Line.js~Line",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Line.js~Line#getLength",
    "access": "public",
    "description": "Get the line length",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/Point.js",
    "content": "/**\n * Represents a set of co-ordinates on a 2D plane\n *\n * @class Point\n */\nclass Point {\n    /**\n     * Creates an instance of Point.\n     * @param {number} x X position\n     * @param {number} y Y position\n     *\n     * @memberof Point\n     */\n    constructor (x, y) {\n        /**\n         * @type {number}\n         */\n        this.x = x;\n\n        /**\n         * @type {number}\n         */\n        this.y = y;\n    }\n}\n/** @ignore */\nmodule.exports = Point;\n",
    "static": true,
    "longname": "/home/travis/build/robertmain/node-pureimage/src/Point.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "Point",
    "memberof": "src/Point.js",
    "static": true,
    "longname": "src/Point.js~Point",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/Point.js",
    "importStyle": "Point",
    "description": "Represents a set of co-ordinates on a 2D plane",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Point"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 57,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Point.js~Point",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Point.js~Point#constructor",
    "access": "public",
    "description": "Creates an instance of Point.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      }
    ]
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "x",
    "memberof": "src/Point.js~Point",
    "static": false,
    "longname": "src/Point.js~Point#x",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "y",
    "memberof": "src/Point.js~Point",
    "static": false,
    "longname": "src/Point.js~Point#y",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/bitmap.js",
    "content": "const Context      = require('./context');\nconst NAMED_COLORS = require('./named_colors');\nconst uint32       = require('./uint32');\n\n/**\n * The Bitmap class is used for direct pixel manipulation(for example setting a pixel colour,\n * transparency etc). It also provides a factory method for creating new instances of\n * {@link Context}\n *\n * @class Bitmap\n */\nclass Bitmap {\n\n    /**\n     * Creates an instance of Bitmap.\n     * @param {number} w      Width\n     * @param {number} h      Height\n     * @param {any}   options Currently unused\n     * @memberof Bitmap\n     */\n    constructor(w,h, options) {\n\n        /**\n         * @type {number}\n         */\n        this.width = Math.floor(w);\n\n        /**\n         * @type {number}\n         */\n        this.height = Math.floor(h);\n\n        /**\n         * @type {ArrayBuffer}\n         */\n        this.data = Buffer.alloc(w*h*4);\n\n        var fillval = NAMED_COLORS.black;\n        for(var j=0; j<h; j++) {\n            for (var i = 0; i < w; i++) {\n                this.setPixelRGBA(i, j, fillval);\n            }\n        }\n\n    }\n\n    /**\n     * Calculate Index\n     *\n     * @param {number} x X position\n     * @param {number} y Y position\n     *\n     * @returns {number}\n     *\n     * @memberof Bitmap\n     */\n    calculateIndex (x,y) {\n        x = Math.floor(x);\n        y = Math.floor(y);\n        if (x<0 || y<0 || x >= this.width || y >= this.height) return 0;\n        return (this.width*y+x)*4;\n    }\n\n    /**\n     * Set the RGBA(Red, Green, Blue, Alpha) values on an individual pixel level\n     *\n     * @param {number} x    X axis position\n     * @param {number} y    Y axis position\n     * @param {number} rgba A hex representation of the RGBA value of the pixel. See {@link NAMED_COLORS} for examples\n     *\n     * @returns {void}\n     *\n     * @memberof Bitmap\n     */\n    setPixelRGBA(x,y,rgba) {\n        let i = this.calculateIndex(x, y);\n        const bytes = uint32.getBytesBigEndian(rgba);\n        this.data[i+0] = bytes[0];\n        this.data[i+1] = bytes[1];\n        this.data[i+2] = bytes[2];\n        this.data[i+3] = bytes[3];\n    }\n\n    /**\n     * Set the individual red, green, blue and alpha levels of an individual pixel\n     *\n     * @param {number} x X axis position\n     * @param {number} y Y axis position\n     * @param {number} r Red level\n     * @param {number} g Green level\n     * @param {number} b Blue level\n     * @param {number} a Alpha level\n     *\n     * @returns {void}\n     *\n     * @memberof Bitmap\n     */\n    setPixelRGBA_i(x,y,r,g,b,a) {\n        let i = this.calculateIndex(x, y);\n        this.data[i+0] = r;\n        this.data[i+1] = g;\n        this.data[i+2] = b;\n        this.data[i+3] = a;\n    }\n\n    /**\n     * Get the RGBA value of an individual pixel as a hexadecimal number(See {@link NAMED_COLORS} for examples)\n     *\n     * @param {number} x X axis potiion\n     * @param {number} y Y axis position\n     *\n     * @returns {number}\n     *\n     * @memberof Bitmap\n     */\n    getPixelRGBA(x,y) {\n        let i = this.calculateIndex(x, y);\n        return uint32.fromBytesBigEndian(\n            this.data[i+0],\n            this.data[i+1],\n            this.data[i+2],\n            this.data[i+3]);\n    }\n\n    /**\n     * Get Pixel RGBA Seperate\n     *\n     * @param {number} x X axis position\n     * @param {number} y Y axis position\n     *\n     * @ignore\n     *\n     * @returns {Array}\n     *\n     * @memberof Bitmap\n     */\n    getPixelRGBA_separate(x,y) {\n        var i = this.calculateIndex(x,y);\n        return this.data.slice(i,i+4);\n    }\n\n    /**\n     * {@link Context} factory. Creates a new {@link Context} instance object for the current bitmap object\n     *\n     * @returns {Context}\n     *\n     * @memberof Bitmap\n     */\n    getContext() {\n        return new Context(this);\n    }\n}\nmodule.exports = Bitmap;\n",
    "static": true,
    "longname": "/home/travis/build/robertmain/node-pureimage/src/bitmap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "Context",
    "memberof": "src/bitmap.js",
    "static": true,
    "longname": "src/bitmap.js~Context",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/bitmap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "NAMED_COLORS",
    "memberof": "src/bitmap.js",
    "static": true,
    "longname": "src/bitmap.js~NAMED_COLORS",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/bitmap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "uint32",
    "memberof": "src/bitmap.js",
    "static": true,
    "longname": "src/bitmap.js~uint32",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/bitmap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "Bitmap",
    "memberof": "src/bitmap.js",
    "static": true,
    "longname": "src/bitmap.js~Bitmap",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/bitmap.js",
    "importStyle": "Bitmap",
    "description": "The Bitmap class is used for direct pixel manipulation(for example setting a pixel colour,\ntransparency etc). It also provides a factory method for creating new instances of\n{@link Context}",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Bitmap"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bitmap.js~Bitmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bitmap.js~Bitmap#constructor",
    "access": "public",
    "description": "Creates an instance of Bitmap.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "Width"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "Height"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Currently unused"
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "width",
    "memberof": "src/bitmap.js~Bitmap",
    "static": false,
    "longname": "src/bitmap.js~Bitmap#width",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "height",
    "memberof": "src/bitmap.js~Bitmap",
    "static": false,
    "longname": "src/bitmap.js~Bitmap#height",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "data",
    "memberof": "src/bitmap.js~Bitmap",
    "static": false,
    "longname": "src/bitmap.js~Bitmap#data",
    "access": "public",
    "description": "",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "ArrayBuffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "calculateIndex",
    "memberof": "src/bitmap.js~Bitmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bitmap.js~Bitmap#calculateIndex",
    "access": "public",
    "description": "Calculate Index",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "setPixelRGBA",
    "memberof": "src/bitmap.js~Bitmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bitmap.js~Bitmap#setPixelRGBA",
    "access": "public",
    "description": "Set the RGBA(Red, Green, Blue, Alpha) values on an individual pixel level",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X axis position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y axis position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rgba",
        "description": "A hex representation of the RGBA value of the pixel. See {@link NAMED_COLORS} for examples"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "setPixelRGBA_i",
    "memberof": "src/bitmap.js~Bitmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bitmap.js~Bitmap#setPixelRGBA_i",
    "access": "public",
    "description": "Set the individual red, green, blue and alpha levels of an individual pixel",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X axis position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y axis position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Red level"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "Green level"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Blue level"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "Alpha level"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getPixelRGBA",
    "memberof": "src/bitmap.js~Bitmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bitmap.js~Bitmap#getPixelRGBA",
    "access": "public",
    "description": "Get the RGBA value of an individual pixel as a hexadecimal number(See {@link NAMED_COLORS} for examples)",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X axis potiion"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y axis position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getPixelRGBA_separate",
    "memberof": "src/bitmap.js~Bitmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bitmap.js~Bitmap#getPixelRGBA_separate",
    "access": "public",
    "description": "Get Pixel RGBA Seperate",
    "lineNumber": 137,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X axis position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y axis position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "getContext",
    "memberof": "src/bitmap.js~Bitmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bitmap.js~Bitmap#getContext",
    "access": "public",
    "description": "{@link Context} factory. Creates a new {@link Context} instance object for the current bitmap object",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Context}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Context"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/context.js",
    "content": "\"use strict\";\n\nconst Line         = require('./Line');\nconst NAMED_COLORS = require('./named_colors');\nconst Point        = require('./Point');\nconst TEXT         = require('./text');\nconst trans        = require('./transform');\nconst uint32       = require('./uint32');\n\n/**\n * Enum for path commands (used for encoding and decoding lines, curves etc. to and from a path)\n * @enum {string}\n */\nconst PATH_COMMAND = {\n    MOVE: 'm',\n    LINE: 'l',\n    QUADRATIC_CURVE: 'q',\n    BEZIER_CURVE: 'b'\n};\n\n/**\n * Used for drawing rectangles, text, images and other objects onto the canvas element. It provides the 2D rendering context for a drawing surface.\n *\n * It has the same API as [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) from the HTML5 canvas spec\n *\n * @class Context\n */\nclass Context {\n    /**\n     * Creates a new pure image Context\n     *\n     * @param {Bitmap} bitmap An instance of the {@link Bitmap} class\n     * @memberof Context\n     */\n    constructor(bitmap) {\n        /**\n         * An instance of the {@link Bitmap} class. Used for direct pixel manipulation(for example setting pixel colours)\n         * @type {Bitmap}\n         */\n        this.bitmap = bitmap;\n\n        /**\n         *  A 32-bit unsigned integer (uint32) number representing the fill color of the 2D drawing context\n         *\n         * @type {number}\n         */\n        this._fillColor = NAMED_COLORS.black;\n\n        /**\n         * @type {number}\n         */\n        this._strokeColor = NAMED_COLORS.black;\n\n        /**\n         * @type {number}\n         */\n        this._lineWidth = 1;\n\n        /**\n         * @type {number}\n         */\n        this._globalAlpha = 1;\n\n        /**\n         * @type {Transform}\n         */\n        this.transform = new trans.Transform();\n\n        /**\n         * @type {object} Plain js object wrapping the font name and size\n         */\n        this._font = {\n            family:'invalid',\n            size:12\n        };\n\n        /**\n         * @type {boolean} Enable or disable image smoothing(anti-aliasing)\n         */\n        this.imageSmoothingEnabled = true;\n\n        /**\n         * @type {?any}\n         */\n        this._clip = null;\n\n        /**\n         * @type {string}\n         */\n        this._fillStyle_text = '';\n\n        /**\n         * @type {string}\n         */\n        this._strokeStyle_text = '';\n    }\n\n    /**\n     * The color or style to use inside shapes. The default is #000 (black).\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle\n     * @type {string}\n     */\n    get fillStyle () {\n        return this._fillStyle_text;\n    };\n\n    /**\n     * @param {string} val\n     * @example ctx.fillStyle = 'rgba(0, 25, 234, 0.6)';\n     */\n    set fillStyle (val) {\n        this._fillColor = Context.colorStringToUint32(val);\n        this._fillStyle_text = val;\n    };\n\n    /**\n     * The color or style to use for the lines around shapes. The default is #000 (black).\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle\n     * @type {string}\n     */\n    get strokeStyle () {\n        return this._strokeStyle_text\n    };\n\n    /**\n     * @param {number} val\n     * @example ctx.strokeStyle = 'rgba(0, 25, 234, 0.6)';\n     */\n    set strokeStyle (val) {\n        this._strokeColor = Context.colorStringToUint32(val);\n        this._strokeStyle_text = val;\n    };\n\n    /**\n     * The thickness of lines in space units. When getting, it returns the current value (1.0 by default). When setting, zero, negative, `Infinity` and `NaN` values are ignored; otherwise the current value is set to the new value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth\n     * @type {number}\n     */\n    get lineWidth() {\n        return this._lineWidth;\n    };\n\n    /**\n     * @param {string} val\n     * @example ctx.lineWidth = 15;\n     */\n    set lineWidth(val) {\n        this._lineWidth = val;\n    };\n\n    /**\n     * The alpha value that is applied to shapes and images before they are drawn onto the canvas. The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque).\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha\n     * @type {Boolean}\n     */\n    get globalAlpha() {\n        return this._globalAlpha;\n    };\n\n    /**\n     * @param {boolean} val\n     * @example ctx.globalAlpha = 1;\n     */\n    set globalAlpha(val) {\n        this._globalAlpha = clamp(val,0,1);\n    }\n\n    /**\n     * The current text style being used when drawing text. This string uses the same syntax as the CSS font specifier\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font\n     * @type {object}\n     * @property {number} size   The an integer representing the font size to use\n     * @property {string} family The font family to set\n     */\n    get font() {};\n\n    /**\n     * @param {object} font\n     * @example ctx.globalAlpha = 1;\n     */\n    set font(val) {\n        var n         = val.trim().indexOf(' ');\n        var font_size = parseInt(val.slice(0,n));\n        var font_name = val.slice(n).trim();\n\n        this._font.family = font_name;\n        this._font.size   = font_size;\n    }\n\n\n    /**\n     * Saves the entire state of the canvas by pushing the current state onto a stack\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    save() {\n        this.transform.save();\n    }\n\n    /**\n     * Adds a translation transformation by moving the canvas and its origin `x` horizontally and `y` vertically on the grid\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate\n     *\n     * @param {number} x X position\n     * @param {number} y Y position\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    translate(x,y) {\n        this.transform.translate(x,y);\n    }\n\n    /**\n     * Add a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in adians\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate\n     *\n     * @param {number} angle Degrees of rotation (in radians)\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    rotate(angle) {\n        this.transform.rotate(angle);\n    }\n\n    /**\n     * Adds a scaling transformation to the canvas units by `x` horizontally and by `y` vertically\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate\n     *\n     * @param {number} sx Scale X amount\n     * @param {number} sy Scale Y amount\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    scale(sx,sy) {\n        this.transform.scale(sx,sy);\n    }\n\n    /**\n     * Restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    restore() {\n        this.transform.restore();\n    }\n\n\n    /**\n     * Draws a filled rectangle whose starting point is at the coordinates `(x, y)` with the specified width and height and whose style is determined by the fillStyle attribute.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect\n     *\n     * @param {number} x X position\n     * @param {number} y Y position\n     * @param {number} w Width\n     * @param {number} h Height\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    fillRect(x,y,w,h) {\n        for(var i=x; i<x+w; i++) {\n            for(var j=y; j<y+h; j++) {\n                this.fillPixel(i,j);\n            }\n        }\n    }\n\n    /**\n     * Sets all pixels in the rectangle defined by starting point `(x, y)` and size `(width, height)` to transparent black, erasing any previously drawn content.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect\n     *\n     * @param {number} x X position\n     * @param {number} y Y position\n     * @param {number} w Width\n     * @param {number} h Height\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    clearRect(x,y,w,h) {\n        for(var i=x; i<x+w; i++) {\n            for(var j=y; j<y+h; j++) {\n                this.bitmap.setPixelRGBA(i,j,0x00000000);\n            }\n        }\n    }\n\n    /**\n     * Paints a rectangle which has a starting point at `(x, y)` and has a `w` width and an `h` height onto the canvas, using the current stroke style.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect\n     *\n     * @param {number} x X position\n     * @param {number} y Y position\n     * @param {number} w Width\n     * @param {number} h Height\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    strokeRect(x,y,w,h) {\n        for(var i=x; i<x+w; i++) {\n            this.bitmap.setPixelRGBA(i, y, this._strokeColor);\n            this.bitmap.setPixelRGBA(i, y+h, this._strokeColor);\n        }\n        for(var j=y; j<y+h; j++) {\n            this.bitmap.setPixelRGBA(x, j, this._strokeColor);\n            this.bitmap.setPixelRGBA(x+w, j, this._strokeColor);\n        }\n    }\n\n    /**\n     * Set the background colour of a single pixel denoted by the `x` and `y` co-ordinates\n     *\n     * @param {number} x The x axis of the pixel\n     * @param {number} y The y axis of the pixel\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    fillPixel(x,y) {\n        if(!this.pixelInsideClip(x,y)) {\n            return\n        }\n\n        var new_pixel   = this.calculateRGBA(x,y);\n        var old_pixel   = this.bitmap.getPixelRGBA(x,y);\n        var final_pixel = this.composite(x,y,old_pixel,new_pixel);\n\n        this.bitmap.setPixelRGBA(x,y,final_pixel);\n    }\n\n    /**\n     * Paints a pixel which has an x axis position of `x` and a y axis psotion of `y`\n     *\n     * @param {number} x The x axis of the pixel to stroke\n     * @param {number} y The y axis of the pixel to stroke\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    strokePixel(x,y) {\n        if(!this.pixelInsideClip(x,y)) {\n            return\n        }\n\n        var new_pixel   = this.calculateRGBA_stroke(x,y);\n        var old_pixel   = this.bitmap.getPixelRGBA(x,y);\n        var final_pixel = this.composite(x,y,old_pixel,new_pixel);\n\n        this.bitmap.setPixelRGBA(x,y,final_pixel);\n    }\n\n    /**\n     * Fill Pixel With Color\n     *\n     * @param {number} x   The x axis of the pixel to fill\n     * @param {number} y   The y axis of the pixel to fill\n     * @param {number} col\n     *\n     * @ignore\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    fillPixelWithColor(x,y,col) {\n        if(!this.pixelInsideClip(x,y)) {\n            return\n        }\n\n        var new_pixel   = col;\n        var old_pixel   = this.bitmap.getPixelRGBA(x,y);\n        var final_pixel = this.composite(x,y,old_pixel,new_pixel);\n\n        this.bitmap.setPixelRGBA(x,y,final_pixel);\n    }\n\n    /**\n     * Composite\n     *\n     * @param {number} i Unused\n     * @param {number} j Unused\n     * @param {number} old_pixel\n     * @param {number} new_pixel\n     *\n     * @ignore\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    composite(i,j,old_pixel, new_pixel) {\n        const old_rgba = uint32.getBytesBigEndian(old_pixel);\n        const new_rgba = uint32.getBytesBigEndian(new_pixel);\n\n        //convert to range of 0->1\n        const A = new_rgba.map((b)=>b/255);\n        const B = old_rgba.map((b)=>b/255);\n        //multiply by global alpha\n        A[3] = A[3]*this._globalAlpha;\n\n        //do a standard composite (SRC_OVER)\n        function compit(ca,cb,aa,ab) {\n            return (ca*aa + cb*ab * (1-aa)) / (aa+ab*(1-aa));\n        }\n        const C = A.map((comp,i)=> compit(A[i],B[i],A[3],B[3]));\n\n        //convert back to 0->255 range\n        const Cf = C.map((c)=>c*255);\n        //convert back to int\n        return uint32.fromBytesBigEndian(Cf[0],Cf[1],Cf[2],Cf[3]);\n    }\n\n    /**\n     * Calculate RGBA\n     *\n     * @param {number} x X position\n     * @param {number} y Y position\n     *\n     * @ignore\n     *\n     * @returns {number}\n     *\n     * @memberof Context\n     */\n    calculateRGBA(x,y) {\n        return this._fillColor;\n    }\n\n    /**\n     * Calculate RGBA Stroke\n     *\n     * @param {number} x X position\n     * @param {number} y Y position\n     *\n     * @ignore\n     *\n     * @returns {number}\n     *\n     * @memberof Context\n     */\n    calculateRGBA_stroke(x,y) {\n        return this._strokeColor;\n    }\n\n\n    /**\n     * Get Image Data\n     *\n     * @param {number} x X position\n     * @param {number} y Y position\n     * @param {number} w Width\n     * @param {number} h Height\n     *\n     * @ignore\n     *\n     * @returns {Bitmap}\n     *\n     * @memberof Context\n     */\n    getImageData(x,y,w,h) {\n        return this.bitmap;\n    }\n\n    /**\n     * *Put Image Data\n     *\n     * @param {number} id Image ID\n     * @param {number} x  X position\n     * @param {number} y  Y position\n     *\n     * @ignore\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    putImageData(id, x, y) {\n        throw new (\"Method not yet implemented\");\n    }\n\n    /**\n     * Provides different ways to draw an image onto the canvas.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\n     *\n     * @param {Bitmap} bitmap An instance of the {@link Bitmap} class to use for drawing\n     * @param {number} sx     The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.\n     * @param {number} sy     The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.\n     * @param {number} sw     The width of the sub-rectangle of the source {@link Bitmap} to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by `sx` and `sy` to the bottom-right corner of the image is used.\n     * @param {number} sh     The height of the sub-rectangle of the source {@link Bitmap} to draw into the destination context.\n     * @param {number} dx     The X coordinate in the destination canvas at which to place the top-left corner of the source {@link Bitmap}\n     * @param {number} dy     The Y coordinate in the destination canvas at which to place the top-left corner of the source {@link Bitmap}\n     * @param {number} dw     The width to draw the {@link Bitmap} in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn\n     * @param {number} dh     The height to draw the {@link Bitmap} in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    drawImage(bitmap, sx,sy,sw,sh, dx, dy, dw, dh) {\n        for(var i=0; i<dw; i++) {\n            var tx = i/dw;\n            var ssx = Math.floor(tx*sw)+sx;\n            for(var j=0; j<dh; j++) {\n                var ty = j/dh;\n                var ssy = sy+Math.floor(ty * sh);\n                var rgba = bitmap.getPixelRGBA(ssx,ssy);\n                this.bitmap.setPixelRGBA(dx+i, dy+j, rgba);\n            }\n        }\n    }\n\n\n    /**\n     * Starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath\n     *\n     * @returns {void}\n     *o\n     * @memberof Context\n     */\n    beginPath() {\n        /**\n         * @type {Array}\n         */\n        this.path = [];\n    }\n\n    /**\n     * Moves the starting point of a new sub-path to the (x, y) coordinates.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo\n     *\n     * @param {number} x The x axis of the point.\n     * @param {number} y The y axis of the point.\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n    * */\n    moveTo(x,y) {\n        return this._moveTo(new Point(x, y));\n    }\n\n    /**\n     * Moves the starting point of a new sub-path to the (x, y) coordinates.\n     *\n     * @param {Point} pt A `point` object representing a set of co-ordinates to move the \"pen\" to.\n     *\n     * @example\n     * //All of the following are valid:\n     * this._moveTo({x: 20, y: 40})\n     * this._moveTo(new Point(20, 40))\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n    * */\n    _moveTo(pt) {\n        pt = this.transform.transformPoint(pt);\n        /**\n         * Set the starting co-ordinates for the path starting point\n         * @type {Point}\n         */\n        this.pathstart = pt;\n        this.path.push([PATH_COMMAND.MOVE, pt]);\n    }\n\n    /**\n     * Connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo\n     *\n     * @param {number} x The x axis of the coordinate for the end of the line.\n     * @param {number} y The y axis of the coordinate for the end of the line.\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    lineTo(x,y) {\n        return this._lineTo(new Point(x, y));\n    }\n\n    /**\n     * Connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).\n     *\n     * @param {Point} pt A point object to draw a line to from the current set of co-ordinates\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    _lineTo(pt) {\n        this.path.push([PATH_COMMAND.LINE, this.transform.transformPoint(pt)]);\n    }\n\n    /**\n     * Adds a quadratic Bézier curve to the path. It requires two points. The first point is a control point and the second one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the quadratic Bézier curve.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\n     *\n     * @param {number} cp1x The x axis of the coordinate for the control point.\n     * @param {number} cp1y The y axis of the coordinate for the control point.\n     * @param {number} x    The x axis of the coordinate for the end point.\n     * @param {number} y    The y axis of the coordinate for the end point.\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    quadraticCurveTo(cp1x, cp1y, x,y) {\n        let cp1 = this.transform.transformPoint(new Point(cp1x, cp1y));\n        let pt  = this.transform.transformPoint(new Point(x, y));\n        this.path.push([PATH_COMMAND.QUADRATIC_CURVE, cp1, pt]);\n    }\n\n    /**\n     * Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the Bézier curve.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\n     *\n     * @param {number} cp1x The x axis of the coordinate for the first control point.\n     * @param {number} cp1y The y axis of the coordinate for first control point.\n     * @param {number} cp2x The x axis of the coordinate for the second control point.\n     * @param {number} cp2y The y axis of the coordinate for the second control point.\n     * @param {number} x    The x axis of the coordinate for the end point.\n     * @param {number} y    The y axis of the coordinate for the end point.\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this._bezierCurveTo(new Point(cp1x, cp1y), new Point(cp2x, cp2y), new Point(x, y));\n    }\n\n    /**\n     * Bezier Curve To\n     *\n     * @param {number} cp1 Curve point 1\n     * @param {number} cp2 Curve point 2\n     * @param {Point}  pt\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n    * */\n    _bezierCurveTo(cp1, cp2, pt) {\n        cp1 = this.transform.transformPoint(cp1);\n        cp2 = this.transform.transformPoint(cp2);\n        pt  = this.transform.transformPoint(pt);\n        this.path.push([PATH_COMMAND.BEZIER_CURVE, cp1, cp2, pt]);\n    }\n\n    /**\n     * Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc\n     *\n     * @param {number}  x         The x coordinate of the arc's center\n     * @param {number}  y         The y coordinate of the arc's center\n     * @param {number}  rad       The arc's radius\n     * @param {number}  start     The angle at which the arc starts, measured clockwise from the positive x axis and expressed in radians\n     * @param {number}  end       The angle at which the arc ends, measured clockwise from the positive x axis and expressed in radians\n     * @param {boolean} clockwise A boolean which, if true, causes the arc to be drawn clockwise between the two angles.\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    arc(x,y, rad, start, end, clockwise) {\n        function calcPoint(ctx,type,angle) {\n            let px = x + Math.sin(angle)*rad;\n            let py = y + Math.cos(angle)*rad;\n            return new Point(px, py);\n        }\n        this._moveTo(calcPoint(this, PATH_COMMAND.MOVE, start));\n        for(var a=start; a<=end; a+=Math.PI/16)  {\n            this._lineTo(calcPoint(this, PATH_COMMAND.LINE, a));\n        }\n        this._lineTo(calcPoint(this, PATH_COMMAND.LINE, end));\n    }\n\n    /**\n     * Arc To\n     *\n     * @ignore\n     *\n     * @throws {Error} Method is not yet implemented\n     *\n     * @memberof Context\n     */\n    arcTo() {\n        throw new Error(\"arcTo not yet supported\");\n    }\n\n    /**\n     * Rect\n     *\n     * @ignore\n     *\n     * @throws {Error} Method is not yet implemented\n     *\n     * @memberof Context\n     */\n    rect() {\n        throw new Error(\"rect not yet supported\");\n    }\n\n    /**\n     * Ellipse\n     *\n     * @ignore\n     *\n     * @throws {Error} Method is not yet implemented\n     *\n     * @memberof Context\n     */\n    ellipse() {\n        throw new Error(\"ellipse not yet supported\");\n    }\n\n    /**\n     * Turns the path currently being built into the current clipping path.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    clip() {\n        this._clip = pathToLines(this.path);\n    }\n\n    /**\n     * Measure Text\n     *\n     * @ignore\n     *\n     * @throws {Error} Method is not yet implemented\n     *\n     * @memberof Context\n     */\n    measureText() {\n        throw new Error(\"measureText not yet supported\");\n    }\n\n    /**\n     * Causes the point of the pen to move back to the start of the current sub-path. It tries to add a straight line (but does not actually draw it) from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    closePath() {\n        this.path.push([PATH_COMMAND.LINE, this.pathstart]);\n    }\n\n\n    /**\n     * Strokes the current or given path with the current stroke style\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    stroke() {\n        pathToLines(this.path).forEach((line)=> this.drawLine(line));\n    }\n\n    /**\n     * Draw a line using the correct anti-aliased, or non-anti-aliased line drawing function based on the value of {@link imageSmoothingEnabled}\n     *\n     * @param {Line} line A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish\n     * @example\n     * //All of the following are valid:\n     * ctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})\n     * ctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))\n     * ctx.drawLine(new Line(20, 42, 20, 90))\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    drawLine(line) {\n        this.imageSmoothingEnabled?this.drawLine_aa(line):this.drawLine_noaa(line)\n    }\n\n    /**\n     *\n     * Draw a line without anti-aliasing using Bresenham's algorithm\n     *\n     * @param {Line} line A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish\n     * @example\n     * //All of the following are valid:\n     * ctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})\n     * ctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))\n     * ctx.drawLine(new Line(20, 42, 20, 90))\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    drawLine_noaa(line) {\n        //Bresenham's from Rosetta Code\n        // http://rosettacode.org/wiki/Bitmap/Bresenham's_line_algorithm#JavaScript\n        var x0 = Math.floor(line.start.x);\n        var y0 = Math.floor(line.start.y);\n        var x1 = Math.floor(line.end.x);\n        var y1 = Math.floor(line.end.y);\n        var dx = Math.abs(x1 - x0), sx = x0 < x1 ? 1 : -1;\n        var dy = Math.abs(y1 - y0), sy = y0 < y1 ? 1 : -1;\n        var err = (dx>dy ? dx : -dy)/2;\n\n        while (true) {\n            this.strokePixel(x0,y0);\n            if (x0 === x1 && y0 === y1) break;\n            var e2 = err;\n            if (e2 > -dx) { err -= dy; x0 += sx; }\n            if (e2 < dy) { err += dx; y0 += sy; }\n        }\n    }\n\n    /**\n     * Draw Line Anti-aliased\n     *\n     * Draw anti-aliased line using Bresenham's algorithm\n     *\n     * @see http://members.chello.at/~easyfilter/bresenham.html\n     *\n     * @param {Line} line A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish\n     * @example\n     * //All of the following are valid:\n     * ctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})\n     * ctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))\n     * ctx.drawLine(new Line(20, 42, 20, 90))\n     *\n     * @memberof Context\n     */\n    drawLine_aa(line) {\n        let width = this._lineWidth;\n        let x0 = Math.floor(line.start.x);\n        let y0 = Math.floor(line.start.y);\n        let x1 = Math.floor(line.end.x);\n        let y1 = Math.floor(line.end.y);\n        let dx = Math.abs(x1 - x0), sx = x0 < x1 ? 1 : -1;\n        let dy = Math.abs(y1 - y0), sy = y0 < y1 ? 1 : -1;\n\n        let err = dx - dy, e2, x2, y2;\n        let ed = dx + dy === 0 ? 1 : Math.sqrt(dx * dx + dy * dy);\n        let rgb = uint32.and(this._strokeColor, 0xFFFFFF00);\n        for (width = (width+1)/2; ; ) {\n            let alpha = ~~Math.max(0, 255 * (Math.abs(err - dx + dy) / ed - width + 1));\n            var pixelColor = uint32.or(rgb,255-alpha);\n            this.fillPixelWithColor(x0,y0,pixelColor);\n            e2 = err; x2 = x0;\n            if (2*e2 >= -dx) {\n                for (e2 += dy, y2 = y0; e2 < ed*width && (y1 !== y2 || dx > dy); e2 += dx) {\n                    alpha = ~~Math.max(0, 255 * (Math.abs(e2) / ed - width + 1));\n                    var pixelColor = uint32.or(rgb,255-alpha);\n                    this.fillPixelWithColor(x0, y2 += sy, pixelColor);\n                }\n                if (x0 === x1) break;\n                e2 = err; err -= dy; x0 += sx;\n            }\n            if (2*e2 <= dy) {\n                for (e2 = dx-e2; e2 < ed*width && (x1 !== x2 || dx < dy); e2 += dy) {\n                    alpha = ~~Math.max(0, 255 * (Math.abs(e2) / ed - width + 1));\n                    var pixelColor = uint32.or(rgb,255-alpha);\n                    this.fillPixelWithColor(x2 += sx, y0, pixelColor);\n                }\n                if (y0 === y1) break;\n                err += dx; y0 += sy;\n            }\n        }\n    }\n\n    /**\n     * Fills the current or given path with the current fill style. Uses {@link fill_aa} and {@link fill_noaa} depending on the the value of {@link imageSmoothingEnabled}\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    fill() {\n        this.imageSmoothingEnabled ? this.fill_aa() : this.fill_noaa();\n    }\n\n    /**\n     * Fill Anti-aliased\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    fill_aa() {\n        //get just the color part\n        var rgb = uint32.and(this._fillColor,0xFFFFFF00);\n        var lines = pathToLines(this.path);\n        var bounds = calcMinimumBounds(lines);\n\n        var startY = Math.min(bounds.y2-1, this.bitmap.height);\n        var endY = Math.max(bounds.y, 0);\n\n        for(var j=startY; j>=endY; j--) {\n            var ints = calcSortedIntersections(lines,j);\n            //fill between each pair of intersections\n            for(var i=0; i<ints.length; i+=2) {\n                var fstartf = fract(ints[i]);\n                var fendf   = fract(ints[i+1]);\n                var start = Math.floor(ints[i]);\n                var end   = Math.floor(ints[i+1]);\n                for(var ii=start; ii<=end; ii++) {\n                    if(ii == start) {\n                        //first\n                        var int = uint32.or(rgb,(1-fstartf)*255);\n                        this.fillPixelWithColor(ii,j, int);\n                        continue;\n                    }\n                    if(ii == end) {\n                        //last\n                        var int = uint32.or(rgb,fendf*255);\n                        this.fillPixelWithColor(ii,j, int);\n                        continue;\n                    }\n                    //console.log(\"filling\",ii,j);\n                    this.fillPixelWithColor(ii,j, this._fillColor);\n                }\n            }\n        }\n    }\n\n    /**\n     * Fill No Anti-aliased\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    fill_noaa() {\n        //get just the color part\n        var rgb = uint32.and(this._fillColor, 0xFFFFFF00);\n        var lines = pathToLines(this.path);\n        var bounds = calcMinimumBounds(lines);\n        for(var j=bounds.y2-1; j>=bounds.y; j--) {\n            var ints = calcSortedIntersections(lines,j);\n            //fill between each pair of intersections\n            for(var i=0; i<ints.length; i+=2) {\n                var start = Math.floor(ints[i]);\n                var end   = Math.floor(ints[i+1]);\n                for(var ii=start; ii<=end; ii++) {\n                    if(ii == start) {\n                        //first\n                        this.fillPixel(ii,j);\n                        continue;\n                    }\n                    if(ii == end) {\n                        //last\n                        this.fillPixel(ii,j);\n                        continue;\n                    }\n                    this.fillPixel(ii,j);\n                }\n            }\n        }\n    }\n\n    /**\n     * Pixel Inside Clip\n     *\n     * Even/odd rule. https://en.wikipedia.org/wiki/Point_in_polygon\n     * technically this is not correct as the default algorithm for\n     * html canvas is supposed to be the non-zero winding rule instead\n     *\n     * @see https://en.wikipedia.org/wiki/Point_in_polygon\n     *\n     * @param {number} x\n     * @param {number} y\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    pixelInsideClip(x,y) {\n        if(!this._clip) return true;\n        //turn into a list of lines\n        // calculate intersections with a horizontal line at j\n        var ints = calcSortedIntersections(this._clip,y);\n        // find the intersections to the left of i (where x < i)\n        var left = ints.filter((inter) => inter<x);\n        if(left.length%2 === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     *  Draws a text string at the specified coordinates, filling the string's characters with the current foreground color\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText\n     *\n     * @param {string} text A string specifying the text string to render into the context. The text is rendered using the settings specified by {@link font}.\n     * @param {number} x    The x -coordinate of the point at which to begin drawing the text, in pixels.\n     * @param {number} y    The y-coordinate of the point at which to begin drawing the text, in pixels.\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    fillText(text, x ,y) { TEXT.processTextPath(this, text, x,y, true);  }\n\n    /**\n     * Draws the outlines of the characters of a specified text string at the given (x, y) position.\n     *\n     * @param {string} text The text to draw using the current {@link font} values.\n     * @param {number} x    The x axis of the coordinate for the text starting point.\n     * @param {number} y    The y axis of the coordinate for the text starting point.\n     *\n     * @returns {void}\n     *\n     * @memberof Context\n     */\n    strokeText(text, x ,y) { TEXT.processTextPath(this, text, x,y, false);  }\n\n\n    /**\n     * Color String To Unint32\n     *\n     * Convert a color string to Uint32 notation\n     *\n     * @static\n     * @param {number} str The color string to convert\n     *\n     * @returns {number}\n     *\n     * @example\n     * var uInt32 = colorStringToUint32('#FF00FF');\n     * console.log(uInt32); // Prints 4278255615\n     *\n     * @memberof Context\n     */\n    static colorStringToUint32(str) {\n        if(!str) return 0x000000;\n        //hex values always get 255 for the alpha channel\n        if(str.indexOf('#')==0) {\n            var int = uint32.toUint32(parseInt(str.substring(1),16));\n            int = uint32.shiftLeft(int,8);\n            int = uint32.or(int,0xff);\n            return int;\n        }\n        if(str.indexOf('rgba')==0) {\n            var parts = str.trim().substring(4).replace('(','').replace(')','').split(',');\n            return uint32.fromBytesBigEndian(\n                parseInt(parts[0]),\n                parseInt(parts[1]),\n                parseInt(parts[2]),\n                Math.floor(parseFloat(parts[3])*255));\n        }\n        if(str.indexOf('rgb')==0) {\n            var parts = str.trim().substring(3).replace('(','').replace(')','').split(',');\n            return uint32.fromBytesBigEndian(parseInt(parts[0]), parseInt(parts[1]), parseInt(parts[2]), 255);\n        }\n        if(NAMED_COLORS[str]) {\n            return NAMED_COLORS[str];\n        }\n        throw new Error(\"unknown style format: \" + str );\n    }\n\n}\nmodule.exports = Context;\n\n/**\n * Returns the decimal portion of a given floating point number\n *\n * @param {number} v The number to return the declimal fration of\n * @example\n * console.log(fract(12.35))\n * // Prints out 0.34999999999999964\n *\n * @returns {number}\n */\nfunction fract(v) {  return v-Math.floor(v);   }\n\n/**\n * Convert a path of points to an array of lines\n *\n * @param {Array} path List of sub-paths\n *\n * @returns {Array<Line>}\n */\nfunction pathToLines(path) {\n    var lines = [];\n    var curr = null;\n\n    path.forEach(function(cmd) {\n        if(cmd[0] == PATH_COMMAND.MOVE) {\n            curr = cmd[1];\n        }\n        if(cmd[0] == PATH_COMMAND.LINE) {\n            var pt = cmd[1];\n            lines.push(new Line(curr, pt));\n            curr = pt;\n        }\n        if(cmd[0] == PATH_COMMAND.QUADRATIC_CURVE) {\n            var pts = [curr, cmd[1], cmd[2]];\n            for(var t=0; t<1; t+=0.1) {\n                var pt = calcQuadraticAtT(pts,t);\n                lines.push(new Line(curr, pt));\n                curr = pt;\n            }\n        }\n        if(cmd[0] == PATH_COMMAND.BEZIER_CURVE) {\n            var pts = [curr, cmd[1], cmd[2], cmd[3]];\n            for(var t=0; t<1; t+=0.1) {\n                var pt = calcBezierAtT(pts,t);\n                lines.push(new Line(curr, pt));\n                curr = pt;\n            }\n        }\n    });\n    return lines;\n}\n\n/**\n * Calculate Quadratic\n *\n * @param {number} p\n * @param {number} t\n *\n * @ignore\n *\n * @returns {void}\n */\nfunction calcQuadraticAtT(p, t) {\n    var x = (1-t)*(1-t)*p[0].x + 2*(1-t)*t*p[1].x + t*t*p[2].x;\n    var y = (1-t)*(1-t)*p[0].y + 2*(1-t)*t*p[1].y + t*t*p[2].y;\n    return new Point(x, y);\n}\n\n/**\n * Calculate Bezier at T\n *\n * @param {number} p\n * @param {number} t\n *\n * @returns {void}\n */\nfunction calcBezierAtT(p, t) {\n    var x = (1-t)*(1-t)*(1-t)*p[0].x + 3*(1-t)*(1-t)*t*p[1].x + 3*(1-t)*t*t*p[2].x + t*t*t*p[3].x;\n    var y = (1-t)*(1-t)*(1-t)*p[0].y + 3*(1-t)*(1-t)*t*p[1].y + 3*(1-t)*t*t*p[2].y + t*t*t*p[3].y;\n    return new Point(x, y);\n}\n\n/**\n * Calculate Minimum Bounds\n *\n * @param {Array} lines\n *\n * @ignore\n *\n * @returns {{x: Number.MAX_VALUE, y: Number.MAX_VALUE, x2: Number.MIN_VALUE, y2: Number.MIN_VALUE}}\n */\nfunction calcMinimumBounds(lines) {\n    var bounds = {  x:  Number.MAX_VALUE, y:  Number.MAX_VALUE,  x2: Number.MIN_VALUE, y2: Number.MIN_VALUE }\n    function checkPoint(pt) {\n        bounds.x  = Math.min(bounds.x,pt.x);\n        bounds.y  = Math.min(bounds.y,pt.y);\n        bounds.x2 = Math.max(bounds.x2,pt.x);\n        bounds.y2 = Math.max(bounds.y2,pt.y);\n    }\n    lines.forEach(function(line) {\n        checkPoint(line.start);\n        checkPoint(line.end);\n    })\n    return bounds;\n}\n\n\n/**\n * Calculate Sorted Intersections\n *\n * Adopted from http://alienryderflex.com/polygon\n *\n * @see http://alienryderflex.com/polygon\n *\n * @param {Array} lines An {@link Array} of Lines\n * @param {number} y\n *\n * @ignore\n *\n * @returns {Array}\n */\nfunction calcSortedIntersections(lines,y) {\n    var xlist = [];\n    for(var i=0; i<lines.length; i++) {\n        var A = lines[i].start;\n        var B = lines[i].end;\n        if(A.y<y && B.y>=y || B.y<y && A.y>=y) {\n            var xval = A.x + (y-A.y) / (B.y-A.y) * (B.x-A.x);\n            xlist.push(xval);\n        }\n    }\n    return xlist.sort(function(a,b) {  return a-b; });\n}\n\n\n/**\n * Linear Interpolation\n *\n * In mathematics, linear interpolation is a method of curve fitting using linear polynomials to construct new data\n * points within the range of a discrete set of known data points.\n *\n * @param {number} a\n * @param {number} b\n * @param {number} t\n *\n * @ignore\n *\n * @see https://en.wikipedia.org/wiki/Linear_interpolation\n *\n * @returns {number}\n */\nfunction lerp(a,b,t) {  return a + (b-a)*t; }\n\n/**\n * Clamping is the process of limiting a position to an area\n *\n * @see https://en.wikipedia.org/wiki/Clamping_(graphics)\n *\n * @param {number} value The value to apply the clamp restriction to\n * @param {number} min   Lower limit\n * @param {number} max   Upper limit\n *\n * @returns {number}\n */\nfunction clamp(value,min,max) {\n    if(value < min) return min;\n    if(value > max) return max;\n    return value;\n}\n",
    "static": true,
    "longname": "/home/travis/build/robertmain/node-pureimage/src/context.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "Line",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~Line",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "NAMED_COLORS",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~NAMED_COLORS",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "Point",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~Point",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "TEXT",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~TEXT",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "trans",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~trans",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "uint32",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~uint32",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "PATH_COMMAND",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~PATH_COMMAND",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Enum for path commands (used for encoding and decoding lines, curves etc. to and from a path)",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "{\"MOVE\": string, \"LINE\": string, \"QUADRATIC_CURVE\": string, \"BEZIER_CURVE\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "fract",
    "memberof": "src/context.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~fract",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Returns the decimal portion of a given floating point number",
    "examples": [
      "console.log(fract(12.35))\n// Prints out 0.34999999999999964"
    ],
    "lineNumber": 1123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The number to return the declimal fration of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "pathToLines",
    "memberof": "src/context.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~pathToLines",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Convert a path of points to an array of lines",
    "lineNumber": 1132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Line>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "List of sub-paths"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Line>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "calcQuadraticAtT",
    "memberof": "src/context.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~calcQuadraticAtT",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Calculate Quadratic",
    "lineNumber": 1175,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "calcBezierAtT",
    "memberof": "src/context.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~calcBezierAtT",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Calculate Bezier at T",
    "lineNumber": 1189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "calcMinimumBounds",
    "memberof": "src/context.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~calcMinimumBounds",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Calculate Minimum Bounds",
    "lineNumber": 1204,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{x: Number.MAX_VALUE, y: Number.MAX_VALUE, x2: Number.MIN_VALUE, y2: Number.MIN_VALUE}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "lines",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{x: Number.MAX_VALUE, y: Number.MAX_VALUE, x2: Number.MIN_VALUE, y2: Number.MIN_VALUE}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "calcSortedIntersections",
    "memberof": "src/context.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~calcSortedIntersections",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Calculate Sorted Intersections\n\nAdopted from http://alienryderflex.com/polygon",
    "see": [
      "http://alienryderflex.com/polygon"
    ],
    "lineNumber": 1234,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "lines",
        "description": "An {@link Array} of Lines"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "lerp",
    "memberof": "src/context.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~lerp",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Linear Interpolation\n\nIn mathematics, linear interpolation is a method of curve fitting using linear polynomials to construct new data\npoints within the range of a discrete set of known data points.",
    "see": [
      "https://en.wikipedia.org/wiki/Linear_interpolation"
    ],
    "lineNumber": 1264,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "clamp",
    "memberof": "src/context.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~clamp",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/context.js",
    "importStyle": null,
    "description": "Clamping is the process of limiting a position to an area",
    "see": [
      "https://en.wikipedia.org/wiki/Clamping_(graphics)"
    ],
    "lineNumber": 1277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to apply the clamp restriction to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "Lower limit"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "Upper limit"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "Context",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~Context",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/context.js",
    "importStyle": "Context",
    "description": "Used for drawing rectangles, text, images and other objects onto the canvas element. It provides the 2D rendering context for a drawing surface.\n\nIt has the same API as [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) from the HTML5 canvas spec",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Context"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#constructor",
    "access": "public",
    "description": "Creates a new pure image Context",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Bitmap"
        ],
        "spread": false,
        "optional": false,
        "name": "bitmap",
        "description": "An instance of the {@link Bitmap} class"
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "bitmap",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#bitmap",
    "access": "public",
    "description": "An instance of the {@link Bitmap} class. Used for direct pixel manipulation(for example setting pixel colours)",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Bitmap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "_fillColor",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#_fillColor",
    "access": "private",
    "description": " A 32-bit unsigned integer (uint32) number representing the fill color of the 2D drawing context",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_strokeColor",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#_strokeColor",
    "access": "private",
    "description": "",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_lineWidth",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#_lineWidth",
    "access": "private",
    "description": "",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "_globalAlpha",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#_globalAlpha",
    "access": "private",
    "description": "",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "transform",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#transform",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "Transform"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "_font",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#_font",
    "access": "private",
    "description": "",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "imageSmoothingEnabled",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#imageSmoothingEnabled",
    "access": "public",
    "description": "",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "_clip",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#_clip",
    "access": "private",
    "description": "",
    "lineNumber": 85,
    "type": {
      "nullable": true,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "_fillStyle_text",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#_fillStyle_text",
    "access": "private",
    "description": "",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "_strokeStyle_text",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#_strokeStyle_text",
    "access": "private",
    "description": "",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "fillStyle",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#fillStyle",
    "access": "public",
    "description": "The color or style to use inside shapes. The default is #000 (black).\n\n",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle"
    ],
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "modality": "both"
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "strokeStyle",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#strokeStyle",
    "access": "public",
    "description": "The color or style to use for the lines around shapes. The default is #000 (black).\n\n",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle"
    ],
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "modality": "both"
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "lineWidth",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#lineWidth",
    "access": "public",
    "description": "The thickness of lines in space units. When getting, it returns the current value (1.0 by default). When setting, zero, negative, `Infinity` and `NaN` values are ignored; otherwise the current value is set to the new value.\n\n",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth"
    ],
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "modality": "both"
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "globalAlpha",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#globalAlpha",
    "access": "public",
    "description": "The alpha value that is applied to shapes and images before they are drawn onto the canvas. The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque).\n\n",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha"
    ],
    "lineNumber": 160,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "modality": "both"
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "font",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#font",
    "access": "public",
    "description": "The current text style being used when drawing text. This string uses the same syntax as the CSS font specifier\n\n",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font"
    ],
    "lineNumber": 180,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "The an integer representing the font size to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "family",
        "description": "The font family to set"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "modality": "both"
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "save",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#save",
    "access": "public",
    "description": "Saves the entire state of the canvas by pushing the current state onto a stack",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save"
    ],
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "translate",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#translate",
    "access": "public",
    "description": "Adds a translation transformation by moving the canvas and its origin `x` horizontally and `y` vertically on the grid",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate"
    ],
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "rotate",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#rotate",
    "access": "public",
    "description": "Add a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in adians",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate"
    ],
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Degrees of rotation (in radians)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "scale",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#scale",
    "access": "public",
    "description": "Adds a scaling transformation to the canvas units by `x` horizontally and by `y` vertically",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate"
    ],
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sx",
        "description": "Scale X amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sy",
        "description": "Scale Y amount"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "restore",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#restore",
    "access": "public",
    "description": "Restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore"
    ],
    "lineNumber": 265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "fillRect",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#fillRect",
    "access": "public",
    "description": "Draws a filled rectangle whose starting point is at the coordinates `(x, y)` with the specified width and height and whose style is determined by the fillStyle attribute.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect"
    ],
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "Width"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "Height"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "clearRect",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#clearRect",
    "access": "public",
    "description": "Sets all pixels in the rectangle defined by starting point `(x, y)` and size `(width, height)` to transparent black, erasing any previously drawn content.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect"
    ],
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "Width"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "Height"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "strokeRect",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#strokeRect",
    "access": "public",
    "description": "Paints a rectangle which has a starting point at `(x, y)` and has a `w` width and an `h` height onto the canvas, using the current stroke style.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect"
    ],
    "lineNumber": 328,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "Width"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "Height"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "fillPixel",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#fillPixel",
    "access": "public",
    "description": "Set the background colour of a single pixel denoted by the `x` and `y` co-ordinates",
    "lineNumber": 349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x axis of the pixel"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y axis of the pixel"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "strokePixel",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#strokePixel",
    "access": "public",
    "description": "Paints a pixel which has an x axis position of `x` and a y axis psotion of `y`",
    "lineNumber": 371,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x axis of the pixel to stroke"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y axis of the pixel to stroke"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "fillPixelWithColor",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#fillPixelWithColor",
    "access": "public",
    "description": "Fill Pixel With Color",
    "lineNumber": 396,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x axis of the pixel to fill"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y axis of the pixel to fill"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "composite",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#composite",
    "access": "public",
    "description": "Composite",
    "lineNumber": 422,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "Unused"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "j",
        "description": "Unused"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "old_pixel",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "new_pixel",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "calculateRGBA",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#calculateRGBA",
    "access": "public",
    "description": "Calculate RGBA",
    "lineNumber": 456,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "calculateRGBA_stroke",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#calculateRGBA_stroke",
    "access": "public",
    "description": "Calculate RGBA Stroke",
    "lineNumber": 472,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "getImageData",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#getImageData",
    "access": "public",
    "description": "Get Image Data",
    "lineNumber": 491,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bitmap}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "Width"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "Height"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bitmap"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "putImageData",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#putImageData",
    "access": "public",
    "description": "*Put Image Data",
    "lineNumber": 508,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Image ID"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "drawImage",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#drawImage",
    "access": "public",
    "description": "Provides different ways to draw an image onto the canvas.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage"
    ],
    "lineNumber": 531,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Bitmap"
        ],
        "spread": false,
        "optional": false,
        "name": "bitmap",
        "description": "An instance of the {@link Bitmap} class to use for drawing"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sx",
        "description": "The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sy",
        "description": "The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sw",
        "description": "The width of the sub-rectangle of the source {@link Bitmap} to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by `sx` and `sy` to the bottom-right corner of the image is used."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sh",
        "description": "The height of the sub-rectangle of the source {@link Bitmap} to draw into the destination context."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dx",
        "description": "The X coordinate in the destination canvas at which to place the top-left corner of the source {@link Bitmap}"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dy",
        "description": "The Y coordinate in the destination canvas at which to place the top-left corner of the source {@link Bitmap}"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dw",
        "description": "The width to draw the {@link Bitmap} in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dh",
        "description": "The height to draw the {@link Bitmap} in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "beginPath",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#beginPath",
    "access": "public",
    "description": "Starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath"
    ],
    "lineNumber": 554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}\no"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": "o"
    },
    "params": []
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "path",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#path",
    "access": "public",
    "description": "",
    "lineNumber": 558,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "moveTo",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#moveTo",
    "access": "public",
    "description": "Moves the starting point of a new sub-path to the (x, y) coordinates.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo"
    ],
    "lineNumber": 573,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x axis of the point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y axis of the point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "_moveTo",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#_moveTo",
    "access": "private",
    "description": "Moves the starting point of a new sub-path to the (x, y) coordinates.",
    "examples": [
      "//All of the following are valid:\nthis._moveTo({x: 20, y: 40})\nthis._moveTo(new Point(20, 40))"
    ],
    "lineNumber": 591,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "pt",
        "description": "A `point` object representing a set of co-ordinates to move the \"pen\" to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "pathstart",
    "memberof": "src/context.js~Context",
    "static": false,
    "longname": "src/context.js~Context#pathstart",
    "access": "public",
    "description": "Set the starting co-ordinates for the path starting point",
    "lineNumber": 597,
    "type": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "lineTo",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#lineTo",
    "access": "public",
    "description": "Connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo"
    ],
    "lineNumber": 613,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x axis of the coordinate for the end of the line."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y axis of the coordinate for the end of the line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "_lineTo",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#_lineTo",
    "access": "private",
    "description": "Connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).",
    "lineNumber": 626,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "pt",
        "description": "A point object to draw a line to from the current set of co-ordinates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "quadraticCurveTo",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#quadraticCurveTo",
    "access": "public",
    "description": "Adds a quadratic Bézier curve to the path. It requires two points. The first point is a control point and the second one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the quadratic Bézier curve.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo"
    ],
    "lineNumber": 644,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cp1x",
        "description": "The x axis of the coordinate for the control point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cp1y",
        "description": "The y axis of the coordinate for the control point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x axis of the coordinate for the end point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y axis of the coordinate for the end point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "bezierCurveTo",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#bezierCurveTo",
    "access": "public",
    "description": "Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the Bézier curve.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo"
    ],
    "lineNumber": 666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cp1x",
        "description": "The x axis of the coordinate for the first control point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cp1y",
        "description": "The y axis of the coordinate for first control point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cp2x",
        "description": "The x axis of the coordinate for the second control point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cp2y",
        "description": "The y axis of the coordinate for the second control point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x axis of the coordinate for the end point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y axis of the coordinate for the end point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "_bezierCurveTo",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#_bezierCurveTo",
    "access": "private",
    "description": "Bezier Curve To",
    "lineNumber": 681,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cp1",
        "description": "Curve point 1"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cp2",
        "description": "Curve point 2"
      },
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "pt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "arc",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#arc",
    "access": "public",
    "description": "Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc"
    ],
    "lineNumber": 704,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the arc's center"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the arc's center"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rad",
        "description": "The arc's radius"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The angle at which the arc starts, measured clockwise from the positive x axis and expressed in radians"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The angle at which the arc ends, measured clockwise from the positive x axis and expressed in radians"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "clockwise",
        "description": "A boolean which, if true, causes the arc to be drawn clockwise between the two angles."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "arcTo",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#arcTo",
    "access": "public",
    "description": "Arc To",
    "lineNumber": 726,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Method is not yet implemented"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "rect",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#rect",
    "access": "public",
    "description": "Rect",
    "lineNumber": 739,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Method is not yet implemented"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "ellipse",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#ellipse",
    "access": "public",
    "description": "Ellipse",
    "lineNumber": 752,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Method is not yet implemented"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "clip",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#clip",
    "access": "public",
    "description": "Turns the path currently being built into the current clipping path.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip"
    ],
    "lineNumber": 765,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "measureText",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#measureText",
    "access": "public",
    "description": "Measure Text",
    "lineNumber": 778,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Method is not yet implemented"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "closePath",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#closePath",
    "access": "public",
    "description": "Causes the point of the pen to move back to the start of the current sub-path. It tries to add a straight line (but does not actually draw it) from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath"
    ],
    "lineNumber": 791,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "stroke",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#stroke",
    "access": "public",
    "description": "Strokes the current or given path with the current stroke style",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke"
    ],
    "lineNumber": 805,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "drawLine",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#drawLine",
    "access": "public",
    "description": "Draw a line using the correct anti-aliased, or non-anti-aliased line drawing function based on the value of {@link imageSmoothingEnabled}",
    "examples": [
      "//All of the following are valid:\nctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})\nctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))\nctx.drawLine(new Line(20, 42, 20, 90))"
    ],
    "lineNumber": 823,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Line"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "drawLine_noaa",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#drawLine_noaa",
    "access": "public",
    "description": "\nDraw a line without anti-aliasing using Bresenham's algorithm",
    "examples": [
      "//All of the following are valid:\nctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})\nctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))\nctx.drawLine(new Line(20, 42, 20, 90))"
    ],
    "lineNumber": 842,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Line"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "drawLine_aa",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#drawLine_aa",
    "access": "public",
    "description": "Draw Line Anti-aliased\n\nDraw anti-aliased line using Bresenham's algorithm",
    "examples": [
      "//All of the following are valid:\nctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})\nctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))\nctx.drawLine(new Line(20, 42, 20, 90))"
    ],
    "see": [
      "http://members.chello.at/~easyfilter/bresenham.html"
    ],
    "lineNumber": 878,
    "params": [
      {
        "nullable": null,
        "types": [
          "Line"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish"
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "fill",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#fill",
    "access": "public",
    "description": "Fills the current or given path with the current fill style. Uses {@link fill_aa} and {@link fill_noaa} depending on the the value of {@link imageSmoothingEnabled}",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill"
    ],
    "lineNumber": 925,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "fill_aa",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#fill_aa",
    "access": "public",
    "description": "Fill Anti-aliased",
    "lineNumber": 936,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "fill_noaa",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#fill_noaa",
    "access": "public",
    "description": "Fill No Anti-aliased",
    "lineNumber": 980,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "pixelInsideClip",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#pixelInsideClip",
    "access": "public",
    "description": "Pixel Inside Clip\n\nEven/odd rule. https://en.wikipedia.org/wiki/Point_in_polygon\ntechnically this is not correct as the default algorithm for\nhtml canvas is supposed to be the non-zero winding rule instead",
    "see": [
      "https://en.wikipedia.org/wiki/Point_in_polygon"
    ],
    "lineNumber": 1024,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "fillText",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#fillText",
    "access": "public",
    "description": " Draws a text string at the specified coordinates, filling the string's characters with the current foreground color",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText"
    ],
    "lineNumber": 1051,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "A string specifying the text string to render into the context. The text is rendered using the settings specified by {@link font}."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x -coordinate of the point at which to begin drawing the text, in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-coordinate of the point at which to begin drawing the text, in pixels."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "strokeText",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#strokeText",
    "access": "public",
    "description": "Draws the outlines of the characters of a specified text string at the given (x, y) position.",
    "lineNumber": 1064,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to draw using the current {@link font} values."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x axis of the coordinate for the text starting point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y axis of the coordinate for the text starting point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "colorStringToUint32",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/context.js~Context.colorStringToUint32",
    "access": "public",
    "description": "Color String To Unint32\n\nConvert a color string to Uint32 notation",
    "examples": [
      "var uInt32 = colorStringToUint32('#FF00FF');\nconsole.log(uInt32); // Prints 4278255615"
    ],
    "lineNumber": 1083,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The color string to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/named_colors.js",
    "content": "/**\n * Enumeration containing popular colors\n * @enum {string}\n */\nvar NAMED_COLORS = {\n    'white': 0xFFFFFFff,\n    'black': 0x000000ff,\n    'red'  : 0xFF0000ff,\n    'green': 0x00FF00ff,\n    'blue' : 0x0000FFff\n}\n\nmodule.exports = NAMED_COLORS;\n",
    "static": true,
    "longname": "/home/travis/build/robertmain/node-pureimage/src/named_colors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "NAMED_COLORS",
    "memberof": "src/named_colors.js",
    "static": true,
    "longname": "src/named_colors.js~NAMED_COLORS",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/named_colors.js",
    "importStyle": "NAMED_COLORS",
    "description": "Enumeration containing popular colors",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "{\"white\": number, \"black\": number, \"red\": number, \"green\": number, \"blue\": number}"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/pureimage.js",
    "content": "const Bitmap = require('./bitmap');\nconst fs     = require('fs');\nconst JPEG   = require('jpeg-js');\nconst PNG    = require('pngjs').PNG;\nconst text   = require('./text');\nconst uint32 = require('./uint32');\n\n/**\n * Create a new bitmap image\n *\n * @param {number} w       Image width\n * @param {number} h       Image height\n * @param {object} options Options to be passed to {@link Bitmap}\n *\n * @returns {Bitmap}\n */\nexports.make = function(w,h,options) {\n    return new Bitmap(w,h,options);\n};\n\n/**\n * Encode the PNG image to output stream\n *\n * @param {Bitmap} bitmap    An instance of {@link Bitmap} to be encoded to PNG\n * @param {Stream} outstream The stream to write the PNG file to\n *\n * @returns {Promise<void>}\n */\nexports.encodePNGToStream = function(bitmap, outstream) {\n    return new Promise((res,rej)=>{\n        var png = new PNG({\n            width:bitmap.width,\n            height:bitmap.height\n        });\n\n        for(var i=0; i<bitmap.width; i++) {\n            for(var j=0; j<bitmap.height; j++) {\n                var rgba = bitmap.getPixelRGBA(i,j);\n                var n = (j*bitmap.width+i)*4;\n                var bytes = uint32.getBytesBigEndian(rgba);\n                for(var k=0; k<4; k++) {\n                    png.data[n+k] = bytes[k];\n                }\n            }\n        }\n\n        png.pack()\n            .pipe(outstream)\n            .on('finish', ()=>{  res(); })\n            .on('error', (err) => { rej(err); })\n    });\n}\n\n/**\n * Encode JPEG To Stream\n *\n * Encode the JPEG image to output stream\n *\n * @param {string} img       An object containing a raw buffer of the image data (`img.buffer`) along with the width(`img.width`) and height (`img.height`) of the image\n * @param {Stream} outstream The stream to write the JPEG file to\n * @returns {Promise<void>}\n */\nexports.encodeJPEGToStream = function(img, outstream) {\n    return new Promise((res,rej)=> {\n        var data = {\n            data: img.data,\n            width: img.width,\n            height: img.height\n        };\n        outstream.on('error', (err) => rej(err));\n        outstream.write(JPEG.encode(data, 50).data, () => res());\n    });\n};\n\n/**\n * Decode JPEG From Stream\n *\n * Decode a JPEG image from an incoming stream of data\n *\n * @param {Stream} data A readable stream to decode JPEG data from\n *\n * @returns {Promise<Bitmap>}\n */\nexports.decodeJPEGFromStream = function(data) {\n    return new Promise((res,rej)=>{\n        try {\n            var chunks = [];\n            data.on('data',(chunk)=>{\n                chunks.push(chunk);\n            });\n            data.on('end',()=>{\n                var buf = Buffer.concat(chunks);\n                var rawImageData = JPEG.decode(buf);\n                var bitmap = new Bitmap(rawImageData.width, rawImageData.height);\n                for (var i = 0; i < rawImageData.width; i++) {\n                    for (var j = 0; j < rawImageData.height; j++) {\n                        var n = (j * rawImageData.width + i) * 4;\n                        bitmap.setPixelRGBA_i(i, j,\n                            rawImageData.data[n + 0],\n                            rawImageData.data[n + 1],\n                            rawImageData.data[n + 2],\n                            rawImageData.data[n + 3]\n                        );\n                    }\n                }\n                res(bitmap);\n            });\n        } catch (e) {\n            console.log(e);\n            rej(e);\n        }\n    });\n};\n\n/**\n * Decode PNG From Stream\n *\n * Decode a PNG file from an incoming readable stream\n *\n * @param {Stream} instream A readable stream containing raw PNG data\n *\n * @returns {Promise<Bitmap>}\n */\nexports.decodePNGFromStream = function(instream) {\n    return new Promise((res,rej)=>{\n        instream.pipe(new PNG())\n            .on(\"parsed\", function() {\n                var bitmap =  new Bitmap(this.width,this.height);\n                for(var i=0; i<bitmap.data.length; i++) {\n                    bitmap.data[i] = this.data[i];\n                };\n                res(bitmap);\n            });\n    })\n};\n\n/**@ignore */\nexports.registerFont = text.registerFont;\n",
    "static": true,
    "longname": "/home/travis/build/robertmain/node-pureimage/src/pureimage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "Bitmap",
    "memberof": "src/pureimage.js",
    "static": true,
    "longname": "src/pureimage.js~Bitmap",
    "access": "public",
    "export": false,
    "importPath": "pureimage",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "fs",
    "memberof": "src/pureimage.js",
    "static": true,
    "longname": "src/pureimage.js~fs",
    "access": "public",
    "export": false,
    "importPath": "pureimage",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "JPEG",
    "memberof": "src/pureimage.js",
    "static": true,
    "longname": "src/pureimage.js~JPEG",
    "access": "public",
    "export": false,
    "importPath": "pureimage",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "PNG",
    "memberof": "src/pureimage.js",
    "static": true,
    "longname": "src/pureimage.js~PNG",
    "access": "public",
    "export": false,
    "importPath": "pureimage",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "text",
    "memberof": "src/pureimage.js",
    "static": true,
    "longname": "src/pureimage.js~text",
    "access": "public",
    "export": false,
    "importPath": "pureimage",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "uint32",
    "memberof": "src/pureimage.js",
    "static": true,
    "longname": "src/pureimage.js~uint32",
    "access": "public",
    "export": false,
    "importPath": "pureimage",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "make",
    "memberof": "src/pureimage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pureimage.js~make",
    "access": "public",
    "export": true,
    "importPath": "pureimage",
    "importStyle": "{make}",
    "description": "Create a new bitmap image",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bitmap}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "Image width"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "Image height"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to be passed to {@link Bitmap}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bitmap"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "encodePNGToStream",
    "memberof": "src/pureimage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pureimage.js~encodePNGToStream",
    "access": "public",
    "export": true,
    "importPath": "pureimage",
    "importStyle": "{encodePNGToStream}",
    "description": "Encode the PNG image to output stream",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Bitmap"
        ],
        "spread": false,
        "optional": false,
        "name": "bitmap",
        "description": "An instance of {@link Bitmap} to be encoded to PNG"
      },
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "outstream",
        "description": "The stream to write the PNG file to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "encodeJPEGToStream",
    "memberof": "src/pureimage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pureimage.js~encodeJPEGToStream",
    "access": "public",
    "export": true,
    "importPath": "pureimage",
    "importStyle": "{encodeJPEGToStream}",
    "description": "Encode JPEG To Stream\n\nEncode the JPEG image to output stream",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "img",
        "description": "An object containing a raw buffer of the image data (`img.buffer`) along with the width(`img.width`) and height (`img.height`) of the image"
      },
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "outstream",
        "description": "The stream to write the JPEG file to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "decodeJPEGFromStream",
    "memberof": "src/pureimage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pureimage.js~decodeJPEGFromStream",
    "access": "public",
    "export": true,
    "importPath": "pureimage",
    "importStyle": "{decodeJPEGFromStream}",
    "description": "Decode JPEG From Stream\n\nDecode a JPEG image from an incoming stream of data",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Bitmap>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A readable stream to decode JPEG data from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Bitmap>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "decodePNGFromStream",
    "memberof": "src/pureimage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pureimage.js~decodePNGFromStream",
    "access": "public",
    "export": true,
    "importPath": "pureimage",
    "importStyle": "{decodePNGFromStream}",
    "description": "Decode PNG From Stream\n\nDecode a PNG file from an incoming readable stream",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Bitmap>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "instream",
        "description": "A readable stream containing raw PNG data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Bitmap>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "registerFont",
    "memberof": "src/pureimage.js",
    "static": true,
    "longname": "src/pureimage.js~registerFont",
    "access": "public",
    "export": true,
    "importPath": "pureimage",
    "importStyle": "{registerFont}",
    "description": null,
    "lineNumber": 138,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/text.js",
    "content": "const opentype = require('opentype.js');\n\n\n/**\n * @type {object} Map containing all the fonts available for use\n */\nvar _fonts = { };\n\n/**\n * The default font family to use for text\n * @type {string}\n */\nconst DEFAULT_FONT_FAMILY = 'source';\n\n/**\n * Register Font\n *\n * @param {string} binaryPath Path to the font binary file(.eot, .ttf etc.)\n * @param {string} family     The name to give the font\n * @param {number} weight     The font weight to use\n * @param {string} style      Font style\n * @param {string} variant    Font variant\n */\nexports.registerFont = function(binaryPath, family, weight, style, variant) {\n    _fonts[family] = {\n        binary: binaryPath,\n        family: family,\n        weight: weight,\n        style: style,\n        variant: variant,\n        loaded: false,\n        font: null,\n        load: function(cb) {\n            if(this.loaded) {\n                if(cb)cb();\n                return;\n            }\n            var self = this;\n            opentype.load(binaryPath, function (err, font) {\n                if (err) throw new Error('Could not load font: ' + err);\n                self.loaded = true;\n                self.font = font;\n                if(cb)cb();\n            });\n        }\n    };\n    return _fonts[family];\n};\n/**@ignore */\nexports.debug_list_of_fonts = _fonts;\n\n/**\n * Find Font\n *\n * Search the `fonts` array for a given font family name\n *\n * @param {string} family The name of the font family to search for\n *\n * @returns {object}\n */\nfunction findFont(family) {\n    if(_fonts[family]) return _fonts[family];\n    family =  Object.keys(_fonts)[0];\n    return _fonts[family];\n}\n\n/**\n * Process Text Path\n *\n * @param {Context} ctx  The {@link Context} to paint on\n * @param {string}  text The text to write to the given Context\n * @param {number}  x    X position\n * @param {number}  y    Y position\n * @param {boolean} fill Indicates wether or not the font should be filled\n *\n * @returns {void}\n */\nexports.processTextPath = function(ctx,text,x,y, fill) {\n    let font = findFont(ctx._font.family);\n    var size = ctx._font.size;\n    if(ctx.USE_FONT_GLYPH_CACHING) {\n        var off = 0;\n        for(var i=0; i<text.length; i++) {\n            var ch = text[i];\n            if(!cache.contains(font,size,ch)) {\n                var glyph = renderGlyphToBitmap(font,ch,size);\n                cache.insert(font,size,ch,glyph);\n            }\n            var glyph = cache.get(font,size,ch);\n            var fx = x+off;\n            var fy = y-glyph.ascent;\n            var fpt = ctx.transform.transformPoint(fx,fy);\n            ctx.copyImage(glyph.bitmap, Math.floor(fpt.x), Math.floor(fpt.y), ctx._fillColor);\n            off += glyph.advance;\n        }\n    } else {\n        var path = font.font.getPath(text, x, y, size);\n        ctx.beginPath();\n        path.commands.forEach(function(cmd) {\n            switch(cmd.type) {\n                case 'M': ctx.moveTo(cmd.x,cmd.y); break;\n                case 'Q': ctx.quadraticCurveTo(cmd.x1,cmd.y1,cmd.x,cmd.y); break;\n                case 'L': ctx.lineTo(cmd.x,cmd.y); break;\n                case 'Z':\n                {\n                    ctx.closePath();\n                    fill ? ctx.fill() : ctx.stroke();\n                    ctx.beginPath();\n                    break;\n                }\n            }\n        });\n    }\n};\n\n/**\n * Process Text Path\n *\n * @param {Context} ctx The {@link Context} to paint on\n * @param {string} text The name to give the font\n *\n * @returns {object}\n */\nexports.measureText = function(ctx,text) {\n    var font = _fonts[ctx._settings.font.family];\n    if(!font) console.log(\"WARNING. Can't find font family \", ctx._settings.font.family);\n    var fsize   = ctx._settings.font.size;\n    var glyphs  = font.font.stringToGlyphs(text);\n    var advance = 0;\n    glyphs.forEach(function(g) { advance += g.advanceWidth; });\n\n    return {\n        width: advance/font.font.unitsPerEm*fsize,\n        emHeightAscent: font.font.ascender/font.font.unitsPerEm*fsize,\n        emHeightDescent: font.font.descender/font.font.unitsPerEm*fsize,\n    };\n};\n",
    "static": true,
    "longname": "/home/travis/build/robertmain/node-pureimage/src/text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "opentype",
    "memberof": "src/text.js",
    "static": true,
    "longname": "src/text.js~opentype",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/text.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "_fonts",
    "memberof": "src/text.js",
    "static": true,
    "longname": "src/text.js~_fonts",
    "access": "private",
    "export": false,
    "importPath": "pureimage/src/text.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "DEFAULT_FONT_FAMILY",
    "memberof": "src/text.js",
    "static": true,
    "longname": "src/text.js~DEFAULT_FONT_FAMILY",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/text.js",
    "importStyle": null,
    "description": "The default font family to use for text",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "registerFont",
    "memberof": "src/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/text.js~registerFont",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/text.js",
    "importStyle": "{registerFont}",
    "description": "Register Font",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "binaryPath",
        "description": "Path to the font binary file(.eot, .ttf etc.)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "family",
        "description": "The name to give the font"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "weight",
        "description": "The font weight to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "Font style"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "variant",
        "description": "Font variant"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "debug_list_of_fonts",
    "memberof": "src/text.js",
    "static": true,
    "longname": "src/text.js~debug_list_of_fonts",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/text.js",
    "importStyle": "{debug_list_of_fonts}",
    "description": null,
    "lineNumber": 50,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "findFont",
    "memberof": "src/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/text.js~findFont",
    "access": "public",
    "export": false,
    "importPath": "pureimage/src/text.js",
    "importStyle": null,
    "description": "Find Font\n\nSearch the `fonts` array for a given font family name",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "family",
        "description": "The name of the font family to search for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "processTextPath",
    "memberof": "src/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/text.js~processTextPath",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/text.js",
    "importStyle": "{processTextPath}",
    "description": "Process Text Path",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Context"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "The {@link Context} to paint on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to write to the given Context"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "Indicates wether or not the font should be filled"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "measureText",
    "memberof": "src/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/text.js~measureText",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/text.js",
    "importStyle": "{measureText}",
    "description": "Process Text Path",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Context"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "The {@link Context} to paint on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The name to give the font"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/transform.js",
    "content": "//transform code from https://github.com/kcmoot/transform-tracker/blob/master/transform-tracker.js\n\n\n/*\n * Transform tracker\n *\n * @author Kevin Moot <kevin.moot@gmail.com>\n * Based on a class created by Simon Sarris - www.simonsarris.com - sarris@acm.org\n */\n\n\"use strict\";\n/**\n * @ignore\n */\nfunction Transform(context) {\n    this.context = context;\n    this.matrix = [1,0,0,1,0,0]; //initialize with the identity matrix\n    this.stack = [];\n\n    //==========================================\n    // Constructor, getter/setter\n    //==========================================\n\n    this.setContext = function(context) {\n        this.context = context;\n    };\n\n    this.getMatrix = function() {\n        return this.matrix;\n    };\n\n    this.setMatrix = function(m) {\n        this.matrix = [m[0],m[1],m[2],m[3],m[4],m[5]];\n        this.setTransform();\n    };\n\n    this.cloneMatrix = function(m) {\n        return [m[0],m[1],m[2],m[3],m[4],m[5]];\n    };\n\n    //==========================================\n    // Stack\n    //==========================================\n\n    this.save = function() {\n        var matrix = this.cloneMatrix(this.getMatrix());\n        this.stack.push(matrix);\n\n        if (this.context) this.context.save();\n    };\n\n    this.restore = function() {\n        if (this.stack.length > 0) {\n            var matrix = this.stack.pop();\n            this.setMatrix(matrix);\n        }\n\n        if (this.context) this.context.restore();\n    };\n\n    //==========================================\n    // Matrix\n    //==========================================\n\n    this.setTransform = function() {\n        if (this.context) {\n            this.context.setTransform(\n                this.matrix[0],\n                this.matrix[1],\n                this.matrix[2],\n                this.matrix[3],\n                this.matrix[4],\n                this.matrix[5]\n            );\n        }\n    };\n\n    this.translate = function(x, y) {\n        this.matrix[4] += this.matrix[0] * x + this.matrix[2] * y;\n        this.matrix[5] += this.matrix[1] * x + this.matrix[3] * y;\n\n        this.setTransform();\n    };\n\n    this.rotate = function(rad) {\n        var c = Math.cos(rad);\n        var s = Math.sin(rad);\n        var m11 = this.matrix[0] * c + this.matrix[2] * s;\n        var m12 = this.matrix[1] * c + this.matrix[3] * s;\n        var m21 = this.matrix[0] * -s + this.matrix[2] * c;\n        var m22 = this.matrix[1] * -s + this.matrix[3] * c;\n        this.matrix[0] = m11;\n        this.matrix[1] = m12;\n        this.matrix[2] = m21;\n        this.matrix[3] = m22;\n\n        this.setTransform();\n    };\n\n    this.scale = function(sx, sy) {\n        this.matrix[0] *= sx;\n        this.matrix[1] *= sx;\n        this.matrix[2] *= sy;\n        this.matrix[3] *= sy;\n\n        this.setTransform();\n    };\n\n    //==========================================\n    // Matrix extensions\n    //==========================================\n\n    this.rotateDegrees = function(deg) {\n        var rad = deg * Math.PI / 180;\n        this.rotate(rad);\n    };\n\n    this.rotateAbout = function(rad, x, y) {\n        this.translate(x, y);\n        this.rotate(rad);\n        this.translate(-x, -y);\n        this.setTransform();\n    }\n\n    this.rotateDegreesAbout = function(deg, x, y) {\n        this.translate(x, y);\n        this.rotateDegrees(deg);\n        this.translate(-x, -y);\n        this.setTransform();\n    }\n\n    this.identity = function() {\n        this.m = [1,0,0,1,0,0];\n        this.setTransform();\n    };\n\n    this.multiply = function(matrix) {\n        var m11 = this.matrix[0] * matrix.m[0] + this.matrix[2] * matrix.m[1];\n        var m12 = this.matrix[1] * matrix.m[0] + this.matrix[3] * matrix.m[1];\n\n        var m21 = this.matrix[0] * matrix.m[2] + this.matrix[2] * matrix.m[3];\n        var m22 = this.matrix[1] * matrix.m[2] + this.matrix[3] * matrix.m[3];\n\n        var dx = this.matrix[0] * matrix.m[4] + this.matrix[2] * matrix.m[5] + this.matrix[4];\n        var dy = this.matrix[1] * matrix.m[4] + this.matrix[3] * matrix.m[5] + this.matrix[5];\n\n        this.matrix[0] = m11;\n        this.matrix[1] = m12;\n        this.matrix[2] = m21;\n        this.matrix[3] = m22;\n        this.matrix[4] = dx;\n        this.matrix[5] = dy;\n        this.setTransform();\n    };\n\n    this.invert = function() {\n        var d = 1 / (this.matrix[0] * this.matrix[3] - this.matrix[1] * this.matrix[2]);\n        var m0 = this.matrix[3] * d;\n        var m1 = -this.matrix[1] * d;\n        var m2 = -this.matrix[2] * d;\n        var m3 = this.matrix[0] * d;\n        var m4 = d * (this.matrix[2] * this.matrix[5] - this.matrix[3] * this.matrix[4]);\n        var m5 = d * (this.matrix[1] * this.matrix[4] - this.matrix[0] * this.matrix[5]);\n        this.matrix[0] = m0;\n        this.matrix[1] = m1;\n        this.matrix[2] = m2;\n        this.matrix[3] = m3;\n        this.matrix[4] = m4;\n        this.matrix[5] = m5;\n        this.setTransform();\n    };\n\n     //==========================================\n    // Helpers\n    //==========================================\n\n    this.transformPoint = function(pt) {\n        var x = pt.x;\n        var y = pt.y;\n        return {\n            x: x * this.matrix[0] + y * this.matrix[2] + this.matrix[4],\n            y: x * this.matrix[1] + y * this.matrix[3] + this.matrix[5]\n        };\n    };\n}\n\nexports.Transform = Transform;\n",
    "static": true,
    "longname": "/home/travis/build/robertmain/node-pureimage/src/transform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "Transform",
    "memberof": "src/transform.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transform.js~Transform",
    "access": "public",
    "export": true,
    "importPath": "pureimage/src/transform.js",
    "importStyle": "{Transform}",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "[![Build Status](https://travis-ci.org/joshmarinacci/node-pureimage.svg?branch=master)](https://travis-ci.org/joshmarinacci/node-pureimage)\n\nPureImage\n==============\n\nPureImage is a pure JavaScript implementation of the HTML Canvas 2d drawing api for NodeJS.\nIt has no native dependencies.\n\nNew 0.1.x release\n=================\n\nI've completely refactored the code so that it should be easier to\nmaintain and implement new features. For the most part there are no API changes (since the API is\n defined by the HTML Canvas spec), but if you\nwere using the font or image loading extensions\nyou will need to use the new function names and switch to promises.\n\nI'm also using Node buffers instead of arrays internally, so you can work with large images\nfaster than before. Rich text is no longer supported, which is fine because it never really worked\nanyway. We'll have to find a different way to do it.\n\nI've tried to maintain all of the patches that have been sent in, but if you contributed a patch\nplease check that it still works. Thank you all!  - josh\n\nPureImage should now be built with Travis\n\n\n## supported Canvas Features\n\n* set pixels\n* stroke and fill paths (rectangles, lines, quadratic curves, bezier curves, arcs/circles)\n* copy and scale images (nearest neighbor)\n* import and export JPG and PNG from streams using promises\n* render basic text (no bold or italics yet)\n* anti-aliased strokes and fills\n* transforms\n* standard globalAlpha and rgba() alpha compositing\n* clip shapes\n\n\nOn the roadmap, but still missing\n=================================\n\n* gradients fills\n* image fills\n* blend modes besides SRC OVER\n* smooth clip shapes\n* bold/italic fonts\n* measure text\n* smooth image interpolation\n\n\nWhy?\n====\n\nThe are more than enough drawing APIs out there. Why do we need another? My\npersonal hatred of C/C++ compilers is [widely known](https://joshondesign.com/2014/09/17/rustlang).\nThe popular Node modules [Canvas.js](https://github.com/Automattic/node-canvas) does a great\njob, but it's backed by Cairo, a C/C++ layer. I hate having native dependencies\nin Node modules. They often don't compile, or break after a system update. They\noften don't support non-X86 architectures (like the Raspberry Pi). You have\nto have a compiler already installed to use them, along with any other native\ndependencies pre-installed (like Cairo).\n\nSo, I made PureImage. It's goal is to implement the HTML Canvas spec in a headless\nNode buffer. No browser or window required.\n\nPureImage is meant to be a small and maintainable Canvas library.\nIt is *not meant to be fast*.  If there are two choices of algorithm we will\ntake the one with the simplest implementation, and preferably the fewest lines.\nWe avoid special cases and optimizations to keep the code simple and maintainable.\nIt should run everywhere and be always produce the same output. But it will not be\nfast. If you need speed go use something else.\n\nPureImage uses only pure JS dependencies.  [OpenType](https://github.com/nodebox/opentype.js/)\nfor font parsing, [PngJS](https://github.com/niegowski/node-pngjs) for PNG import/export,\nand [jpeg-js](https://github.com/eugeneware/jpeg-js) for JPG import/export.\n\n\n\nExamples\n=========\n\n\nMake a new empty image, 100px by 50px. Automatically filled with 100% opaque black.\n\n```js\nvar PImage = require('pureimage');\nvar img1 = PImage.make(100,50);\n```\n\nFill with a red rectangle with 50% opacity\n\n```js\nvar ctx = img1.getContext('2d');\nctx.fillStyle = 'rgba(255,0,0, 0.5)';\nctx.fillRect(0,0,100,100);\n```\n\nFill a green circle wiwth a radius of 40 pixels in the middle of a 100px square black image.\n\n```js\nvar img = PImage.make(100,100);\nvar ctx = img.getContext('2d');\nctx.fillStyle = '#00ff00';\nctx.beginPath();\nctx.arc(50,50,40,0,Math.PI*2,true); // Outer circle\nctx.closePath();\nctx.fill();\n```\n\n![image of arcto with some fringing bugs](firstimages/arcto.png)\n\nDraw the string 'ABC' in white in the font 'Source Sans Pro', loaded from disk, at a size\nof 48 points.\n\n```js\ntest('font test', (t) => {\n    var fnt = PImage.registerFont('tests/fonts/SourceSansPro-Regular.ttf','Source Sans Pro');\n    fnt.load(function() {\n        var img = PImage.make(200,200);\n        var ctx = img.getContext('2d');\n        ctx.fillStyle = '#ffffff';\n        ctx.font = \"48pt 'Source Sans Pro'\";\n        ctx.fillText(\"ABC\", 80, 80);\n    });\n});\n```\n\n\nWrite out to a PNG file\n\n```js\nPImage.encodePNGToStream(img1, fs.createWriteStream('out.png')).then(()=> {\n    console.log(\"wrote out the png file to out.png\");\n}).catch((e)=>{\n    console.log(\"there was an error writing\");\n});\n```\n\nRead a jpeg, resize it, then save it out\n\n```js\nPImage.decodeJPEGFromStream(fs.createReadStream(\"tests/images/bird.jpg\")).then((img)=>{\n    console.log(\"size is\",img.width,img.height);\n    var img2 = PImage.make(50,50);\n    var c = img2.getContext('2d');\n    c.drawImage(img,\n        0, 0, img.width, img.height, // source dimensions\n        0, 0, 50, 50   // destination dimensions\n    );\n    var pth = path.join(BUILD_DIR,\"resized_bird.jpg\");\n    PImage.encodeJPEGToStream(img2,fs.createWriteStream(pth)).then(()=> {\n        console.log(\"done writing\");\n    });\n```\n\n\n\nThanks!\n===============\n\nThanks to Nodebox / EMRG for [opentype.js](https://github.com/nodebox/opentype.js/)\n\nThanks to Rosetta Code for [Bresenham's in JS](http://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm#JavaScript)\n\nThanks to Kuba Niegowski for [PngJS](https://github.com/niegowski/node-pngjs)\n\nThanks to Eugene Ware for [jpeg-js]( https://github.com/eugeneware/jpeg-js )\n\nThanks for patches from:\n\n* Dan [danielbarela](https://github.com/danielbarela)\n* Eugene Kulabuhov [ekulabuhov](https://github.com/ekulabuhov)\n* Lethexa [lethexa](https://github.com/lethexa)\n* The Louie [the-louie](https://github.com/the-louie)\n* Jan Marsch [kekscom](https://github.com/kekscom)\n",
    "longname": "/home/travis/build/robertmain/node-pureimage/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"pureimage\",\n  \"version\": \"0.1.3\",\n  \"description\": \"Pure JS image drawing API based on Canvas. Export to PNG streams.\",\n  \"author\": {\n    \"name\": \"Josh Marinacci\",\n    \"email\": \"joshua@marinacci.org\",\n    \"url\": \"http://joshondesign.com/\"\n  },\n  \"main\": \"./src/pureimage.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/joshmarinacci/node-pureimage.git\"\n  },\n  \"dependencies\": {\n    \"jpeg-js\": \"^0.3.3\",\n    \"opentype.js\": \"^0.4.3\",\n    \"pngjs\": \"^3.3.1\"\n  },\n  \"devDependencies\": {\n    \"esdoc\": \"^1.0.3\",\n    \"esdoc-member-plugin\": \"^1.0.0\",\n    \"esdoc-node\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"tape\": \"^4.6.3\"\n  },\n  \"scripts\": {\n    \"test\": \"node tests/runtests.js\",\n    \"docs\": \"./node_modules/.bin/esdoc\"\n  },\n  \"license\": \"MIT\"\n}\n",
    "longname": "/home/travis/build/robertmain/node-pureimage/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]